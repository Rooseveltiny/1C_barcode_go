// Модуль генерации штрихкодов. Написан на golang скомпилирован под windows
// https://github.com/Rooseveltiny/barcode_go.git

// API

// Функция - Получить картинку штрихкод
//
// Параметры:
//  Данные - Строка	- Данные штрихкода, например "112233112233" для ean13 или "https://google.com" для qrcode.  
//  ТипКода	 - Строка - Тип штрихкода, который необходимо сгенерировать например qrcode или ean13. 
//  Ширина	 - Число - Ширина требуемой картинки штрихкода.
//  Высота	 - Число - Высота требуемой картинки штрихкода.
// Возвращаемое значение:
//  Картинка - Картинка
Функция ПолучитьКартинкуШтрихкод(Данные, ТипКода, Ширина, Высота) Экспорт	
	ИнициализироватьШтрихкодИПолучитьКартинку(Данные, ТипКода, Ширина, Высота);	
КонецФункции

// Процедура - Присвоить рисунку штрихкод
//
// Параметры:
//  Данные - Строка	- Данные штрихкода, например "112233112233" для ean13 или "https://google.com" для qrcode. 
//  ОбластьМакета	- ТабличныйДокумент - область или табличный документ, куда будет помещен штрихкод.
//  Рисунок			- РисунокТабличногоДокумента - Рисунок табличного документа или области табличного документа.
Процедура ПрисвоитьРисункуШтрихКод(Данные, ОбластьМакета, Рисунок) Экспорт	
	ПрисвоитьМакетуРисунокШтрихкод(Данные, ОбластьМакета, Рисунок);	
КонецПроцедуры

// Служебные функции

// Функция - Получить данные для запуска
//
// Параметры:
//  ПутьКПриложению	 - Строка - Абсолютный путь к исполнительному файлу.
//  Параметры		 - Соответствие - Параметры запуска исполнительного файла, Где ключ - флаг.
// Возвращаемое значение:
//  Строка - Полная команда для запуска в окружении операционной системы.
Функция ПолучитьДанныеДляЗапуска(ПутьКПриложению, Параметры)
	
	СтрокаПараметров = ПутьКПриложению+" ";
	Для каждого Параметр Из Параметры Цикл;	                                                     
		СтрокаПараметров = СтрокаПараметров +Параметр.Ключ+"="+Параметр.Значение+" ";		
	КонецЦикла;
	Возврат СтрокаПараметров;
	
КонецФункции

// Функция - Abs (Функция необходима для совместимости со старыми платформами).
//
// Параметры:
//  Аргумент - Число - Входной параметра числа
// Возвращаемое значение:
// 	Число - Число результат.
Функция Abs(Знач Аргумент) Экспорт
	
	Возврат ?(Аргумент>=0, Аргумент, -Аргумент);

КонецФункции

// Функция - Получить путь до среды исполнения
// Возвращаемое значение:
// 	Строка - Абсолютный путь до среды исполнения программы.
Функция ПолучитьПутьДоСредыИсполнения()
	Возврат КаталогПрограммы()+"barcodeVDKextension";
КонецФункции

// Функция - Получить путь исполняемый файл
// Возвращаемое значение:
// 	Строка - Абсолютный путь до исполняемого файла.
Функция ПолучитьПутьИсполняемыйФайл()
	ПутьДоФайлаИсполнения = ПолучитьПутьДоСредыИсполнения()+"\"+"barcode_go.exe";
	ФайлНаДиске = Новый Файл(ПутьДоФайлаИсполнения);
	Если Не ФайлНаДиске.Существует() Тогда
		ВызватьИсключение("Не найдена программа ""barcode_go.exe"" генерации штрихкодов.
		|Программа должна быть помещена в папку ""bin\barcodeVDKextension"" каталога 1с");
	КонецЕсли;
	Возврат ПолучитьПутьДоСредыИсполнения()+"\"+"barcode_go.exe";
КонецФункции

// Функция - Получить путь до временной папки хранения
// Возвращаемое значение:
// 	Строка - Путь до папки temp где хранятся сгенерированные картинки штрихкодов.
Функция ПолучитьПутьДоВременнойПапкиХранения()
	ИсходнаяДата = ТекущаяДата();
	Год = Формат(ИсходнаяДата, "ДФ=гггг");
	Месяц = Формат(ИсходнаяДата, "ДФ=ММ");
	День = Формат(ИсходнаяДата, "ДФ=дд");
	ПапкаДата = Год+"-"+Месяц+"-"+День;
	Возврат ПолучитьПутьДоСредыИсполнения()+"\"+"temp\"+ПапкаДата;
КонецФункции

// Функция - Получить данные будущего временного файла
// Возвращаемое значение:
// 	Структура - Данные о будущем файле: где он хранится, как называется, и полный путь до него. 
Функция ПолучитьДанныеБудущегоВременногоФайла()
	
	ПутьДоВременногоХранения = ПолучитьПутьДоВременнойПапкиХранения();
	ИмяФайла = Строка(Новый УникальныйИдентификатор())+".png";
	ПутьДоФайла = ПутьДоВременногоХранения+"\"+ИмяФайла; 
	Возврат Новый Структура("ИмяФайла, ПутьДоФайла, ПутьДоВременногоХранения", ИмяФайла, ПутьДоФайла, ПутьДоВременногоХранения);
	
КонецФункции

// Функция - Получить картинку
//
// Параметры:
//  ИмяФайла - Строка - Полный абсолютный путь до созданного файла.
// Возвращаемое значение:
// 	Картинка - Картинка
Функция ПолучитьКартинку(ИмяФайла)	
	Возврат Новый Картинка(ИмяФайла);	
КонецФункции

// Функция - Разложить строку на подстроки (Функция необходима для совместимости со старыми платформами).
//
// Параметры:
//  ВходящаяСтрока	 - Строка - Имя рисунка на макете.
//  Разделитель		 - Строка - В Рамкой данной обработки будет использоваться символ "_".
// Возвращаемое значение:
// 	Массив - Массив со значениемя разложения
Функция РазложитьСтрокуНаПодстроки(ВходящаяСтрока, Разделитель)
						   
	МассивСтрок = Новый Массив();
	ВходящаяСтрока = СтрЗаменить(ВходящаяСтрока, Разделитель, Символы.ПС);
	
	Для ИндексСтроки = 1 По СтрЧислоСтрок(ВходящаяСтрока) Цикл
		Подстрока = СтрПолучитьСтроку(ВходящаяСтрока, ИндексСтроки);
		МассивСтрок.Добавить(Подстрока);
	КонецЦикла;
	
	Возврат МассивСтрок;

КонецФункции 

// Функция - Получить тип штрихкода из имени
//
// Параметры:
// ИсходноеИмя	 - Строка - Имя рисунко должно быть следующего формата: <ЛюбоеИмя>_<ТипШтрихкода>
// Возвращаемое значение:
// 	Строка - Тип штрихкода, который будет указываться при запуске программы.
Функция ПолучитьТипШтрихкодаИзИмени(Знач ИсходноеИмя)
	
	Попытка;
		МассивРезультат = РазложитьСтрокуНаПодстроки(ИсходноеИмя, "_");
		Возврат МассивРезультат[1];
	Исключение;
		ВызватьИсключение("Не удалось выяснить тип штрихкода на макете! Чтобы его указать, необходимо в рисунке
		| написать имя в формате: <ИмяРисунка>_<ТипКода>");
	КонецПопытки;	 
	 
КонецФункции

// Процедура - Проверить ширину и длина
//
// Параметры:
//  Ширина	 - Число - Ширина рисунка.
//  Высота	 - Число - Высота рисунка.
//  ТипКода	 - Строка - Тип требуемого кода.
Процедура ПроверитьШиринуИДлина(Ширина, Высота, ТипКода)
	
	Если Ширина < 95 Тогда
		Ширина = 95;
	КонецЕсли;
	
	Если ТипКода = "qrcode" Тогда
		Если Высота < 50 Тогда
			Высота = 50;
		КонецЕсли;
		Ширина = Высота;
	КонецЕсли;

	Ширина = Ширина * 2;
	Высота = Высота * 2; 
	
КонецПроцедуры

// Функция - Новые свойства картинки штрихкода (Фабричный метод)
//
// Параметры:
//  Рисунок	 - РисунокТабличногоДокумента - Рисунок взятый с табличного документа на место которого будет помещен штрихкод.
// Возвращаемое значение:
// 	Структура - Структура свойств, нового рисунка на табличный документ.
Функция НовыеСвойстваКартинкиШтрихкода(Рисунок)
	
	Ширина = 0;
	Высота = 0;
	Лево   = 0;
	Верх   = 0;
	
	Если Рисунок.Ширина < 0 Тогда
		Лево = Рисунок.Лево + Рисунок.Ширина;
	Иначе;
		Лево = Рисунок.Лево;
	КонецЕсли;
	
	Если Рисунок.Высота < 0 Тогда
		Верх = Рисунок.Верх + Рисунок.Высота;
	Иначе;
		Верх = Рисунок.Верх;
	КонецЕсли;
		
	Ширина = Abs(Окр(Рисунок.Ширина,0));
	Высота = Abs(Окр(Рисунок.Высота,0));
	
	СтруктураСвойствШтрихкодКартинки = Новый Структура;
	СтруктураСвойствШтрихкодКартинки.Вставить("Высота", Высота);
	СтруктураСвойствШтрихкодКартинки.Вставить("Ширина", Ширина);
	СтруктураСвойствШтрихкодКартинки.Вставить("Верх", Верх);
	СтруктураСвойствШтрихкодКартинки.Вставить("Лево", Лево);
	СтруктураСвойствШтрихкодКартинки.Вставить("ГраницаСлева", Ложь);
	СтруктураСвойствШтрихкодКартинки.Вставить("ГраницаСправа", Ложь);
	СтруктураСвойствШтрихкодКартинки.Вставить("ГраницаСверху", Ложь);
	СтруктураСвойствШтрихкодКартинки.Вставить("ГраницаСнизу", Ложь);
	СтруктураСвойствШтрихкодКартинки.Вставить("РазмерКартинки", РазмерКартинки.АвтоРазмер);
	
	Возврат СтруктураСвойствШтрихкодКартинки;
	
КонецФункции

// Логика

// Процедура - Присвоить макету рисунок штрихкод
//
// Параметры:
//  Данные			 - Строка - Строка данных например "111111111111" для генерации ean13.
//  ОбластьМакета	 - ТабличныйДокумент	 - Табличный документ или область где будет расположен штрихкод.
//  Рисунок			 - РисунокТабличногоДокумента	 - Рисунок на который будет помещен штрихкод.
Процедура ПрисвоитьМакетуРисунокШтрихкод(Данные, ОбластьМакета, Рисунок)
	
	// Получить все необходимые свойства будущей картинки на макете. 
	СтруктураСвойствШтрихкодКартинки = НовыеСвойстваКартинкиШтрихкода(Рисунок);
	Ширина = СтруктураСвойствШтрихкодКартинки.Ширина;
	Высота = СтруктураСвойствШтрихкодКартинки.Высота;
	
	// Тип требуемого кода. Например ean или qrcode.
	ТипКода = ПолучитьТипШтрихкодаИзИмени(Рисунок.Имя);
	
	// Изменить ссылочно значения ширины и высоты для генерации картинки.
	ПроверитьШиринуИДлина(Ширина, Высота, ТипКода);
	
	// Генерация картинки.
	Картинка = ИнициализироватьШтрихкодИПолучитьКартинку(Данные,ТипКода,Ширина,Высота);	
	СтруктураСвойствШтрихкодКартинки.Вставить("Картинка", Картинка);
	
	// Вставка штрихкода на макет.
	НовыйРисунок = ОбластьМакета.Рисунки.Добавить(ТипРисункаТабличногоДокумента.Картинка);
	ЗаполнитьЗначенияСвойств(НовыйРисунок, СтруктураСвойствШтрихкодКартинки); 
	
КонецПроцедуры

// Функция - Запусить приложение генерации кода
//
// Параметры:
//  Данные - Строка	- Данные штрихкода, например "112233112233" для ean13 или "https://google.com" для qrcode.  
//  ТипКода	 - Строка - Тип штрихкода, который необходимо сгенерировать например qrcode или ean13. 
//  Ширина	 - Число - Ширина требуемой картинки штрихкода.
//  Высота	 - Число - Высота требуемой картинки штрихкода. 
// Возвращаемое значение:
//  Структура - Структура с данными сгенерированного файла.
Функция ЗапуситьПриложениеГенерацииКода(Данные, ТипКода, Ширина, Высота)
	
	КодВозврата = Неопределено;
	
	ПутьДоСреды = ПолучитьПутьДоСредыИсполнения();
	
	ДанныеФайла = ПолучитьДанныеБудущегоВременногоФайла();
	ИсполняемыйФайл = ПолучитьПутьИсполняемыйФайл();
	
	ПараметрыЗапуска = Новый Соответствие;
	ПараметрыЗапуска.Вставить("-link", """"+ДанныеФайла.ИмяФайла+"""");
	ПараметрыЗапуска.Вставить("-path", """"+ДанныеФайла.ПутьДоВременногоХранения+"""");
	ПараметрыЗапуска.Вставить("-width", Ширина);
	ПараметрыЗапуска.Вставить("-height", Высота);
	ПараметрыЗапуска.Вставить("-content", """"+Данные+"""");
	ПараметрыЗапуска.Вставить("-type", ТипКода);
	
	КоманднаяСтрокаЗапуска = ПолучитьДанныеДляЗапуска(ИсполняемыйФайл, ПараметрыЗапуска);
	
	ЗапуститьПриложение(КоманднаяСтрокаЗапуска, ПутьДоСреды, Истина, КодВозврата);
	Если Не КодВозврата = 0 Тогда
		ВызватьИсключение("Не удалось сформировать штрихкод/qrкод. Информацию об ошибке можно посмотреть здесь: "+ПутьДоСреды);
	КонецЕсли;
	Возврат ДанныеФайла.ПутьДоФайла;
	
КонецФункции

// Функция - Инициализировать штрихкод и получить картинку
//
// Параметры:
//  Данные - Строка	- Данные штрихкода, например "112233112233" для ean13 или "https://google.com" для qrcode.  
//  ТипКода	 - Строка - Тип штрихкода, который необходимо сгенерировать например qrcode или ean13. 
//  Ширина	 - Число - Ширина требуемой картинки штрихкода.
//  Высота	 - Число - Высота требуемой картинки штрихкода.
// Возвращаемое значение:
//  Картинка - Картинка сгенерированного штрихкода.
Функция ИнициализироватьШтрихкодИПолучитьКартинку(Данные, ТипКода, Ширина, Высота)
	
	СформированныйФайлШтрихкода = ЗапуситьПриложениеГенерацииКода(Данные, ТипКода, Ширина, Высота);
	Возврат ПолучитьКартинку(СформированныйФайлШтрихкода);
	
КонецФункции

